import discord
import wavelink
from discord.ext import commands

class Music(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.queue = []

    @commands.Cog.listener()
    async def on_ready(self):
        print("ü§ñ Bot est√° pronto! Conectando ao Lavalink...")

        node = wavelink.Node(
            uri="ws://autorack.proxy.rlwy.net:37005",
            password="youshallnotpass",
            resume_key="my_bot",
            user_id=self.bot.user.id
        )

        await wavelink.Pool.connect(client=self.bot, nodes=[node])
        print("‚úÖ Conectado ao Lavalink com sucesso!")

    @commands.command(name="helpMusic")
    async def help_music(self, ctx):
        await ctx.message.delete()
        loading_message = await ctx.send("ü§ñ `BOT`: Carregando comandos de m√∫sica... ‚è≥")

        help_text = """
        ```
        üéµ Comandos de M√∫sica
        - `!leave` : Sai do canal de voz.
        - `!play <nome/link>` : Toca uma m√∫sica.
        - `!pause` : Pausa a m√∫sica.
        - `!resume` : Retoma a m√∫sica pausada.
        - `!skip` : Pula para a pr√≥xima m√∫sica.
        - `!queue` : Mostra a fila de m√∫sicas.
        - `!remove <n√∫mero>` : Remove uma m√∫sica da fila.
        ```
        """
        await loading_message.edit(content=help_text)

    @commands.command(name="play")
    async def play(self, ctx, *, search: str):
        await ctx.message.delete()

        vc: wavelink.Player = ctx.voice_client

        if not vc or not vc.is_connected():
            if ctx.author.voice:
                loading_message = await ctx.send("ü§ñ `BOT`: Entrando no canal de voz... ‚è≥")
                vc: wavelink.Player = await ctx.author.voice.channel.connect(cls=wavelink.Player)
                await loading_message.edit(content="üéµ `BOT`: Conectado ao canal de voz!")
            else:
                return await ctx.send("‚ùå `BOT`: Voc√™ precisa estar em um canal de voz!")

        loading_message = await ctx.send("üîé `BOT`: Buscando m√∫sica... ‚è≥")
        tracks = await wavelink.YouTubeTrack.search(search)

        if not tracks:
            return await loading_message.edit(content="‚ùå `BOT`: M√∫sica n√£o encontrada!")

        track = tracks[0]
        self.queue.append(track)

        if not vc.is_playing():
            await vc.play(self.queue.pop(0))
            await loading_message.edit(content=f"üé∂ `BOT`: Tocando agora: **{track.title}**")
        else:
            await loading_message.edit(content=f"üìú `BOT`: **{track.title}** adicionada √† fila!")

    @commands.command(name="skip")
    async def skip(self, ctx):
        await ctx.message.delete()

        vc: wavelink.Player = ctx.voice_client
        if vc and vc.playing:
            loading_message = await ctx.send("‚è≠ `BOT`: Pulando m√∫sica... ‚è≥")
            await vc.stop()
            await loading_message.edit(content="‚úÖ `BOT`: M√∫sica pulada com sucesso!")
        else:
            await ctx.send("‚ùå `BOT`: Nenhuma m√∫sica tocando no momento.")

    @commands.command(name="pause")
    async def pause(self, ctx):
        await ctx.message.delete()

        vc: wavelink.Player = ctx.voice_client
        if vc and vc.playing:
            loading_message = await ctx.send("‚è∏ `BOT`: Pausando m√∫sica... ‚è≥")
            await vc.pause()
            await loading_message.edit(content="‚úÖ `BOT`: M√∫sica pausada!")
        else:
            await ctx.send("‚ùå `BOT`: Nenhuma m√∫sica tocando no momento.")

    @commands.command(name="resume")
    async def resume(self, ctx):
        await ctx.message.delete()

        vc: wavelink.Player = ctx.voice_client
        if vc and vc.paused:
            loading_message = await ctx.send("‚ñ∂ `BOT`: Retomando m√∫sica... ‚è≥")
            await vc.resume()
            await loading_message.edit(content="‚úÖ `BOT`: M√∫sica retomada!")
        else:
            await ctx.send("‚ùå `BOT`: Nenhuma m√∫sica est√° pausada.")

    @commands.command(name="queue")
    async def show_queue(self, ctx):
        await ctx.message.delete()

        if not self.queue:
            return await ctx.send("‚ùå `BOT`: A fila de m√∫sicas est√° vazia!")

        header = f"{'üìú Fila de M√∫sicas':<25} \n{'-'*40}\n"
        queue_text = "\n".join(f"üé∂ {i+1}. {track.title}" for i, track in enumerate(self.queue))
        panel = f"```{header}{queue_text}```"

        await ctx.send(f"üéµ `BOT`: {panel}")

    @commands.command(name="remove")
    async def remove(self, ctx, index: int):
        await ctx.message.delete()

        if 0 < index <= len(self.queue):
            removed_track = self.queue.pop(index - 1)
            await ctx.send(f"üóë `BOT`: **{removed_track.title}** removida da fila!")
        else:
            await ctx.send("‚ùå `BOT`: √çndice inv√°lido!")

    @commands.command(name="join")
    async def join(self, ctx):
        await ctx.message.delete()

        if ctx.author.voice:
            loading_message = await ctx.send("ü§ñ `BOT`: Conectando ao canal de voz... ‚è≥")

            try:
                vc: wavelink.Player = await ctx.author.voice.channel.connect(cls=wavelink.Player)
                await loading_message.edit(content="üéµ `BOT`: Conectado ao canal de voz!")
            except Exception as e:
                await loading_message.edit(content=f"‚ùå `BOT`: Erro ao conectar: `{e}`")
                print(f"‚ùå Erro ao conectar ao canal de voz: {e}")

        else:
            await ctx.send("‚ùå `BOT`: Voc√™ precisa estar em um canal de voz!")

    @commands.command(name="leave")
    async def leave(self, ctx):
        await ctx.message.delete()

        vc: wavelink.Player = ctx.voice_client
        if vc:
            loading_message = await ctx.send("üëã `BOT`: Desconectando do canal de voz... ‚è≥")
            await vc.disconnect()
            await loading_message.edit(content="‚úÖ `BOT`: Desconectado com sucesso!")
        else:
            await ctx.send("‚ùå `BOT`: O bot n√£o est√° conectado a um canal de voz!")

async def setup(bot):
    await bot.add_cog(Music(bot))
