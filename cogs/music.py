import discord
import yt_dlp
import logging
from discord.ext import commands
from discord import FFmpegPCMAudio

logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(message)s")
logger = logging.getLogger(__name__)

class Music(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.queue = []
        self.current_song = None
        self.current_message = None

    async def get_audio_source(self, query):
        logger.info(f"üîç Buscando √°udio para: {query}")

        ydl_opts = {
            'format': 'bestaudio/best',
            'noplaylist': True,
            'quiet': False,
            'default_search': 'ytsearch1',
            'extract_flat': False
        }

        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            try:
                info = ydl.extract_info(query, download=False)
                if 'entries' in info:
                    info = info['entries'][0]

                video_url = info['webpage_url']
                formats = [fmt['url'] for fmt in info.get('formats', []) if fmt.get('acodec') != 'none']

                if not formats:
                    raise Exception("Nenhum formato de √°udio v√°lido encontrado.")

                logger.info(f"üé∂ M√∫sica encontrada: {info['title']} ({video_url})")
                return FFmpegPCMAudio(formats[0]), info['title'], video_url

            except Exception as e:
                logger.error(f"‚ùå Erro ao obter √°udio: {e}")
                raise

    async def play_next(self, ctx):
        logger.info(f"‚è≠ Tocando pr√≥xima m√∫sica. Fila: {self.queue}")

        if self.queue:
            next_song = self.queue.pop(0)
            self.current_song = next_song
            vc = ctx.voice_client
            if vc:
                try:
                    loading_message = await ctx.send(f"‚è≥ `BOT`: Carregando **{next_song}**...")
                    audio_source, title, video_url = await self.get_audio_source(next_song)

                    if self.current_message:
                        await self.current_message.delete()

                    self.current_message = await ctx.send(f"üé∂ `BOT`: Tocando agora: [{title}]({video_url})")
                    await loading_message.delete()

                    vc.play(audio_source, after=lambda e: self.bot.loop.create_task(self.play_next(ctx)))

                except Exception as e:
                    logger.error(f"‚ùå Erro ao tocar a pr√≥xima m√∫sica: {e}")
                    await ctx.send(f"‚ùå `BOT`: Erro ao tocar a pr√≥xima m√∫sica: {e}")

        else:
            await ctx.voice_client.disconnect()
            await ctx.send("üëã `BOT`: Fila vazia. Saindo do canal de voz.")

    @commands.command(name="helpMusic")
    async def help_music(self, ctx):
        await ctx.message.delete()
        help_text = """
        ```
        üéµ Comandos de M√∫sica:
        - `!play <nome/link>` : Toca uma m√∫sica do YouTube.
        - `!skip` : Pula para a pr√≥xima m√∫sica da fila.
        - `!pause` : Pausa a m√∫sica atual.
        - `!resume` : Retoma a m√∫sica pausada.
        - `!queue` : Mostra a fila de m√∫sicas.
        - `!leave` : Sai do canal de voz.
        ```
        """
        await ctx.send(help_text)

    @commands.command(name="play")
    async def play(self, ctx, *, search: str):
        logger.info(f"üéµ Comando play chamado com par√¢metro: {search}")
        await ctx.message.delete()

        if not ctx.author.voice:
            logger.warning("‚ùå Usu√°rio n√£o est√° em um canal de voz.")
            return await ctx.send("‚ùå `BOT`: Voc√™ precisa estar em um canal de voz!")

        if not ctx.voice_client:
            logger.info("üîó Bot n√£o est√° conectado. Conectando...")
            vc = await ctx.author.voice.channel.connect()
        else:
            vc = ctx.voice_client
            logger.info(f"üéôÔ∏è Bot j√° conectado no canal: {vc.channel}")

        if vc.is_playing():
            logger.info(f"‚ûï M√∫sica j√° tocando. Adicionando {search} √† fila.")
            self.queue.append(search)
            await ctx.send(f"‚ûï `BOT`: M√∫sica adicionada √† fila: **{search}**")
        else:
            logger.info(f"üé∂ Nenhuma m√∫sica tocando. Iniciando reprodu√ß√£o de {search}.")
            self.queue.append(search)
            await self.play_next(ctx)

        await loading_message.delete()

    @commands.command(name="skip")
    async def skip(self, ctx):
        logger.info("‚è≠ Comando skip chamado.")
        await ctx.message.delete()
        vc = ctx.voice_client
        if vc and vc.is_playing():
            logger.info("‚è≠ Pulando m√∫sica atual.")
            vc.stop()
            await ctx.send("‚è≠ `BOT`: Pulando m√∫sica...")
        else:
            logger.warning("‚ùå Nenhuma m√∫sica para pular.")
            await ctx.send("‚ùå `BOT`: Nenhuma m√∫sica tocando no momento.")

    @commands.command(name="pause")
    async def pause(self, ctx):
        logger.info("‚è∏Ô∏è Comando pause chamado.")
        await ctx.message.delete()
        vc = ctx.voice_client
        if vc and vc.is_playing():
            logger.info("‚è∏Ô∏è M√∫sica pausada.")
            vc.pause()
            await ctx.send("‚è∏ `BOT`: M√∫sica pausada!")
        else:
            logger.warning("‚ùå Nenhuma m√∫sica para pausar.")
            await ctx.send("‚ùå `BOT`: Nenhuma m√∫sica tocando no momento.")

    @commands.command(name="resume")
    async def resume(self, ctx):
        logger.info("‚ñ∂Ô∏è Comando resume chamado.")
        await ctx.message.delete()
        vc = ctx.voice_client
        if vc and vc.is_paused():
            logger.info("‚ñ∂Ô∏è M√∫sica retomada.")
            vc.resume()
            await ctx.send("‚ñ∂ `BOT`: M√∫sica retomada!")
        else:
            logger.warning("‚ùå Nenhuma m√∫sica pausada para retomar.")
            await ctx.send("‚ùå `BOT`: Nenhuma m√∫sica pausada.")

    @commands.command(name="queue")
    async def show_queue(self, ctx):
        logger.info("üìú Comando queue chamado.")
        await ctx.message.delete()
        if not self.queue:
            logger.info("üìú A fila de m√∫sicas est√° vazia.")
            return await ctx.send("‚ùå `BOT`: A fila de m√∫sicas est√° vazia!")
        queue_text = "\n".join(f"üé∂ {i+1}. {track}" for i, track in enumerate(self.queue))
        logger.info(f"üìú Fila de m√∫sicas: {self.queue}")
        await ctx.send(f"üéµ `BOT`: ```üìú Fila de M√∫sicas:\n{queue_text}```")

    @commands.command(name="leave")
    async def leave(self, ctx):
        logger.info("üëã Comando leave chamado.")
        await ctx.message.delete()
        if ctx.voice_client:
            logger.info("üëã Bot saindo do canal de voz.")
            await ctx.voice_client.disconnect()
            await ctx.send("üëã `BOT`: Desconectado do canal de voz.")
        else:
            logger.warning("‚ùå Bot n√£o estava conectado.")
            await ctx.send("‚ùå `BOT`: O bot n√£o est√° conectado a um canal de voz!")

async def setup(bot):
    logger.info("‚úÖ Cog Music carregada com sucesso!")
    await bot.add_cog(Music(bot))
