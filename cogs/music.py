import discord
import yt_dlp
from discord.ext import commands
from discord import FFmpegPCMAudio

class Music(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.queue = []
        self.current_song = None

    async def get_audio_source(self, url):
        print(f"[LOG] Obtendo fonte de √°udio para URL: {url}")
        ydl_opts = {
            'format': 'bestaudio/best',
            'postprocessors': [{'key': 'FFmpegAudioConvertor', 'preferredcodec': 'mp3', 'preferredquality': '192'}],
            'quiet': False
        }
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            try:
                info = ydl.extract_info(url, download=False)
                formats = [fmt['url'] for fmt in info['formats'] if 'audio' in fmt.get('format_note', '')]
                if not formats:
                    raise Exception("Nenhum formato de √°udio v√°lido encontrado.")
                print(f"[LOG] Fonte de √°udio obtida com sucesso.")
                return FFmpegPCMAudio(formats[0])
            except Exception as e:
                print(f"[ERRO] Erro ao obter √°udio: {e}")
                raise

    async def play_next(self, ctx):
        print(f"[LOG] Tocando pr√≥xima m√∫sica. Fila: {self.queue}")
        if self.queue:
            next_song = self.queue.pop(0)
            self.current_song = next_song
            vc = ctx.voice_client
            if vc:
                try:
                    audio_source = await self.get_audio_source(next_song)
                    vc.play(audio_source, after=lambda e: self.bot.loop.create_task(self.play_next(ctx)))
                    await ctx.send(f"üé∂ `BOT`: Tocando agora: {next_song}")
                except Exception as e:
                    print(f"[ERRO] Erro ao tocar a pr√≥xima m√∫sica: {e}")
                    await ctx.send(f"‚ùå `BOT`: Erro ao tocar a pr√≥xima m√∫sica: {e}")
        else:
            await ctx.voice_client.disconnect()
            await ctx.send("üëã `BOT`: Fila vazia. Saindo do canal de voz.")

    @commands.command(name="play")
    async def play(self, ctx, *, search: str):
        print(f"[LOG] Comando play chamado com par√¢metro: {search}")
        await ctx.message.delete()

        if not ctx.author.voice:
            print("[LOG] Usu√°rio n√£o est√° em um canal de voz.")
            return await ctx.send("‚ùå `BOT`: Voc√™ precisa estar em um canal de voz!")

        if not ctx.voice_client:
            print("[LOG] Bot n√£o est√° conectado. Conectando...")
            vc = await ctx.author.voice.channel.connect()
        else:
            vc = ctx.voice_client
            print(f"[LOG] Bot j√° conectado no canal: {vc.channel}")

        if vc.is_playing():
            print(f"[LOG] M√∫sica j√° tocando. Adicionando {search} √† fila.")
            self.queue.append(search)
            await ctx.send(f"‚ûï `BOT`: M√∫sica adicionada √† fila: {search}")
        else:
            print(f"[LOG] Nenhuma m√∫sica tocando. Iniciando reprodu√ß√£o de {search}.")
            self.queue.append(search)
            await self.play_next(ctx)

    @commands.command(name="skip")
    async def skip(self, ctx):
        print("[LOG] Comando skip chamado.")
        await ctx.message.delete()
        vc = ctx.voice_client
        if vc and vc.is_playing():
            print("[LOG] Pulando m√∫sica atual.")
            vc.stop()
            await ctx.send("‚è≠ `BOT`: Pulando m√∫sica...")
        else:
            print("[LOG] Nenhuma m√∫sica para pular.")
            await ctx.send("‚ùå `BOT`: Nenhuma m√∫sica tocando no momento.")

    @commands.command(name="pause")
    async def pause(self, ctx):
        print("[LOG] Comando pause chamado.")
        await ctx.message.delete()
        vc = ctx.voice_client
        if vc and vc.is_playing():
            print("[LOG] M√∫sica pausada.")
            vc.pause()
            await ctx.send("‚è∏ `BOT`: M√∫sica pausada!")
        else:
            print("[LOG] Nenhuma m√∫sica para pausar.")
            await ctx.send("‚ùå `BOT`: Nenhuma m√∫sica tocando no momento.")

    @commands.command(name="resume")
    async def resume(self, ctx):
        print("[LOG] Comando resume chamado.")
        await ctx.message.delete()
        vc = ctx.voice_client
        if vc and vc.is_paused():
            print("[LOG] M√∫sica retomada.")
            vc.resume()
            await ctx.send("‚ñ∂ `BOT`: M√∫sica retomada!")
        else:
            print("[LOG] Nenhuma m√∫sica pausada para retomar.")
            await ctx.send("‚ùå `BOT`: Nenhuma m√∫sica pausada.")

    @commands.command(name="queue")
    async def show_queue(self, ctx):
        print("[LOG] Comando queue chamado.")
        await ctx.message.delete()
        if not self.queue:
            print("[LOG] A fila de m√∫sicas est√° vazia.")
            return await ctx.send("‚ùå `BOT`: A fila de m√∫sicas est√° vazia!")
        queue_text = "\n".join(f"üé∂ {i+1}. {track}" for i, track in enumerate(self.queue))
        print(f"[LOG] Fila de m√∫sicas: {self.queue}")
        await ctx.send(f"üéµ `BOT`: ```üìú Fila de M√∫sicas:\n{queue_text}```")

    @commands.command(name="leave")
    async def leave(self, ctx):
        print("[LOG] Comando leave chamado.")
        await ctx.message.delete()
        if ctx.voice_client:
            print("[LOG] Bot saindo do canal de voz.")
            await ctx.voice_client.disconnect()
            await ctx.send("üëã `BOT`: Desconectado do canal de voz.")
        else:
            print("[LOG] Bot n√£o estava conectado.")
            await ctx.send("‚ùå `BOT`: O bot n√£o est√° conectado a um canal de voz!")

async def setup(bot):
    print("‚úÖ Cog Music carregada com sucesso!")
    await bot.add_cog(Music(bot))
